% verify_sim_model2_rlvsl
%
% Verification step for 2 parameter model (model 2) for RLvSL
% (2 parameter model with structure learning fitted directly over each quarter)
%
% Goal: To visualize the variables of the data generated by gen_sim_model_rlvsl.m
%

clear all;

% RL difficulty 
mu       = 55;  % mean of higher distribution
fnr      = .25; % Desired false negative rate of higher distribution
func     = @(sig)fnr-normcdf(50,mu,sig);
sig_opti = fzero(func,15);

% Generative distribution parameters
cfg_tgt      = struct;
cfg_tgt.mtgt = 5;          % difference between the higher and midpoint value
cfg_tgt.stgt = sig_opti;   % standard deviation of generative Gaussians

% Manually set learning rate asymptote 
alpha           = .1; % value of learning rate at asymptote

cfg_mod         = struct;
cfg_mod.nsims   = 1;    % default should be 1
cfg_mod.alpha   = alpha;
cfg_mod.zeta    = 0.6;  % should be fitted for each quarter as below
cfg_mod.strpr   = 0.5;  % structure learned priors on the CORRECT shape

sim_struct = gen_sim_model2_rlvsl(cfg_tgt,cfg_mod);
data = sim_struct.sim_struct.sim;
expe = sim_struct.sim_struct.expe;
clear sim_struct;

%% Data manip step
nt = expe(1).cfg.ntrls;
nb = expe(1).cfg.nbout;
nb_c = nb/3;
refshape = zeros(1,3);
signmult = ones(nb_c,3);

blcks = nan(nb_c,nt,3);
a       = cfg_tgt.stgt/expe(1).cfg.sgen;        % slope of linear transformation aX+b
b       = cfg_tgt.mtgt - a*expe(1).cfg.mgen;    % intercept of linear transf. aX+b

ib_c = ones(3,1);
for ib = 1:nb
    ctype = expe(ib).type;
    switch ctype
        case 'rnd' % random across successive blocks
            ic = 3;
        case 'alt' % always alternating
            ic = 2;
        case 'rep' % always the same
            ic = 1;
    end
    
    if ib < 4
        refshape(ic) = expe(ib).shape(1);
    end
    if expe(ib).shape(1) ~= refshape(ic)
        signmult(ib_c(ic),ic) = -signmult(ib_c(ic),ic);
    end
    blcks(ib_c(ic),:,ic) = expe(ib).blck*a+b;
    
    ib_c(ic) = ib_c(ic)+1;
end

%% Verify outcome sampling distribution in each condition

mean_out = nan(nb_c,3);
sig_out  = nan(nb_c,3);
figure(1);
clf;
hold on;
for ic = 1:3
    subplot(1,3,ic);
    x = linspace(-10,20,100);
    for ib_c = 1:nb_c
        mean_out(ib_c,ic) = mean(blcks(ib_c,:,ic));
        sig_out(ib_c,ic) = std(blcks(ib_c,:,ic));
        plot(x,normpdf(x,mean_out(ib_c,ic),sig_out(ib_c,ic)),'LineWidth',1,'Color',rgb3(ic,ib_c,nb_c));
        hold on;
    end
    xline(5);
end
subplot(1,3,2);
xlabel('Distance from 50');
hold off;

%% Verify RL trajectories for each condition
mt = data.mt;
figure(2);
clf;
hold on;
for ib_c = 1:nb_c
    for ic = 1:3
        subplot(1,3,ic); 
        plot(1:nt, mt(ib_c,:,1,ic)*signmult(ib_c,ic),'LineWidth',2,'Color',rgb3(ic,1,nb_c));
        hold on;
        if ib_c == nb_c
            plot(1:nt, mean(mt(:,:,1,ic).*signmult(:,ic),1),'LineWidth',2,'Color',rgb3(ic,nb_c,nb_c));
            yline(5);
            yline(0);
            ylim([-20 40]);
        hold on;
        end
    end
end
subplot(1,3,2);
xlabel('Trial number');
title(sprintf('Individual RL trajectories over trials and mean trajectory within condition\n'));
subplot(1,3,1);
ylabel('Distance from 50');
hold off;

%% Verify choice probability trajectories for each condition
mp = data.mp;
mp_curves = zeros(4,nt,3);
figure(3);
clf;
hold on;
iqrtr = 0;
for ib_c = 1:nb_c
    if mod(ib_c,4) == 1
        ic_q = zeros(3,1);
    end
    
    for ic = 1:3
        ic_q(ic) = ic_q(ic) + 1;
        subplot(1,3,ic); 
        if signmult(ib_c,ic) == -1
            mp_curves(ic_q(ic),:,ic) = 1-mp(ib_c,:,1,ic);
        else
            mp_curves(ic_q(ic),:,ic) = mp(ib_c,:,1,ic);
        end
        if mod(ib_c,4) == 0
            plot(1:nt, mean(mp_curves(:,:,ic)),'LineWidth',2,'Color',rgb3(ic,ib_c,nb_c));
            hold on;
        end
        
        if ib_c == nb_c
            yline(.5);
            ylim([0 1]);
        hold on;
        end
    end
    
    pause(.2);
end
subplot(1,3,2);
xlabel('Trial number');
title(sprintf('Individual choice probability trajectories over trials within condition\n'));
hold off;

%% functions

function colors = rgb3(ic,ib,nb)
xc = linspace(.8,.2,nb);

colors =  [1,xc(ib),xc(ib); ...
           xc(ib),1,xc(ib); ...
           xc(ib),xc(ib),1];

colors = colors(ic,:);
end

